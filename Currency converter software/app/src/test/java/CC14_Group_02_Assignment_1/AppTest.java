/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package CC14_Group_02_Assignment_1;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeEach;

import java.io.File;
import java.io.FileNotFoundException;
import java.lang.reflect.Executable;
import java.text.ParseException;
import java.util.ArrayList;

import static org.junit.jupiter.api.Assertions.*;

public class AppTest {

    @BeforeEach
    public void setup() {
        App app = new App();
    }


    @Test
    public void testValidFile() {
        File file = new File("src/test/resources/TestDatabase.csv");
        assertTrue(file.exists());
    }

    @Test
    public void testInvalidFile() {
        File file = new File("src/test/resources/InvalidDatabase.csv");
        assertFalse(file.exists());
    }

    @Test
    public void testParseFile() {
        ArrayList<Currency> list = App.parseFile("src/test/resources/TestDatabase.csv");
        assertNotNull(list);
    }

    @Test
    public void testParseFileHistory() {
        ArrayList<Currency> list = App.parseFileHistory("src/test/resources/TestDatabase.csv");
        assertNotNull(list);
    }

    @Test
    public void testGetCurrencyBySymbolFromList() {
        ArrayList<Currency> list = App.parseFile("src/test/resources/TestDatabase.csv");
        Currency currency = Currency.GetCurrencyBySymbolFromList("USD", list);
        assertNotNull(currency);
    }

    @Test
    public void testGetCurrencyBySymbolFromListInvalid() {
        ArrayList<Currency> list = App.parseFile("src/test/resources/TestDatabase.csv");
        Currency currency = Currency.GetCurrencyBySymbolFromList("INVALID", list);
        assertNull(currency);
    }

    @Test
    public void testUpdateExchangeRate(){
        ArrayList<Currency> list = App.parseFile("src/test/resources/TestDatabase.csv");
        Currency existing = Currency.GetCurrencyBySymbolFromList("USD", list);
        assert existing != null;
        try {
            existing.updateExchangeRate(1.0f, App.sdformat.parse("01-01-2020"));
        } catch (ParseException e) {
            throw new RuntimeException(e);
        }
        assertEquals(1.0f, existing.getExchangeRate());
    }

}