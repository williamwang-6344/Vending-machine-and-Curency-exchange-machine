/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package CC14_Group_02_Assignment_2;


import org.junit.After;
import org.junit.jupiter.api.*;

import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;

import static org.junit.jupiter.api.Assertions.*;

class UserManagerTest {

    UserManager testUserManager;
    String dbpath = "../app/src/test/resources/UserProfilesTest.csv";

    @BeforeEach
    public void init(){
        //Create
        testUserManager = new UserManager(dbpath);

        testUserManager.registerUser("test1", "test1", "user");
        testUserManager.registerUser("test2", "test2", "seller");
        testUserManager.registerUser("test3", "test3", "owner");


    }

    @AfterEach
    public void teardown(){

        testUserManager = null;
        try {
            java.io.PrintWriter writer = new PrintWriter(new FileWriter(dbpath));
            writer.print("");
            writer.close();
        } catch (IOException e) {
            throw new RuntimeException(e);
        }


    }


    @Test
    public void testLogin(){
        assertEquals(testUserManager.loginUser("test1", "test1"), "user");
        assertEquals(testUserManager.loginUser("test2", "test2"), "seller");
        assertEquals(testUserManager.loginUser("test3", "test3"), "owner");
    }

    @Test void registerUser(){
        assertTrue(testUserManager.registerUser("testnew", "testnewpw", "user"));
        assertEquals(testUserManager.loginUser("testnew", "testnewpw"), "user");
    }

    @Test void failureTests(){
        //User already exists
        assertFalse(testUserManager.registerUser("test1", "newpassword", "user"));

        //Login with wrong password
        assertEquals(testUserManager.loginUser("test3", "wrongpw"), "fail"); //should fail
    }

    @Test
    public void testRemoveAndRestore(){

        //Check user exists
        assertEquals(testUserManager.loginUser("test2", "test2"), "seller");

        //Remove user
        testUserManager.removeUser("test2");

        //Confirm removal and that other users still exist
        assertEquals(testUserManager.loginUser("test1", "test1"), "user");
        assertEquals(testUserManager.loginUser("test2", "test2"), "fail"); //should fail
        assertEquals(testUserManager.loginUser("test3", "test3"), "owner");

        testUserManager.restoreFromDB(); //restores to what is in file

        //All users should login ok again
        assertEquals(testUserManager.loginUser("test1", "test1"), "user");
        assertEquals(testUserManager.loginUser("test2", "test2"), "seller");
        assertEquals(testUserManager.loginUser("test3", "test3"), "owner");

    }


}
